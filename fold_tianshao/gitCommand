//***********创建版本库*****************************
git clone <url>   //克隆远程远程版本库
git init       //初始化本地版本库
//*************修改和提交***************************
git status   //查看状态
git diff     //查看变更内容
git add .   //跟踪所有改动过得文件
git add <file>  //跟踪指定的文件
git mv <old> <new>  //文件改名
git rm <file>       //删除文件
git rm --cached <file> //停止跟踪文件但不删除
git commit -m "commit message"  //提交所有跟新过的文件
git commit --amend     //修改最后一次提交
//***************查看提交历史***********************
git log     //查看提交历史
git log -p <file>  //查看指定文件的提交历史
git blame <file>   //以列表方式查看指定文件的提交历史

//**************分支与标签**********************************
git branch   //显示所有本地分支
git checkout <branch/tag> //切换到指定分支或标签
git branch <new-branch>   //创建新分支
git branch -d <branch>  //删除本地分支
git tag             //列出所有本地标签
git tag <tagname>   //基于最新提交创建标签
git tag -d <tagname>  //删除标签

//******合并与衍合*************************************
git merge <branch>  //合并指定分支到当前分支
git rebase <branch>  //衍合指定分支到当前分支
//******版本回退**************************************

git reset --hard HEAD^  //撤销工作目录中所有未提交文件的修改内容
git checkout HEAD <file>  //撤销指定文件的未提交文件的修改内容
git revert <commit>   //撤销指定的提交
Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

//*********远程仓库信息**********************************************************

git remote -v      //查看远程版本库信息
git remote show <remote> //查看指定远程版本库信息
git remote get-url origin
//修改远程仓库的关联地址  只有秘钥写入的才能用git@  可以上传代码 否则，只能https:只能下载代码
git remote set-url origin git@github.com:pannitianshao/pixhawk.git   
                           https://github.com/PX4/Firmware.git     //原本地址

git remote add origin <你的项目地址>    // 添加远程版本库
git fetch <remote>   //从远程库获取代码

git remote rm origin                       
//***********拉取和推送文件*******************************************************
git push origin master
git push origin master:v1.8.2
git pull --rebase origin_207 master拉取远程的文件把本地的覆盖，再上传
git push origin_207 master -f  本地强制上传到远程，把远程的覆盖
git pull <remote> <branch>  //下载代码及快速合并
git push <remote> <branch>  //上传代码及快速合并
git push <remote> : <branch/tag-name>  // 删除远程分支或标签
git push --tags   //上传所有标签
git push origin hello_git_branch:master还有一种方法，可以指定提交到远程仓库的某个分支上。如下，是将hello_git_branch分支提交到远程仓库的master上面
//×××××××××××××分支合成××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××× 
如果在v1.8.2分支无法上传到github 可以删除master分支  在新建一个master分支（由于master分支与1.8.2版本冲突） 然后mergy到master分枝上 就可以了

如果提示..v1.8.2无法合成到master上   可以新建一个分之tianshao  然后讲tianshao合并到master上
这样master就有了新修改的文件   并且执行 git push origin master 就可以将本地master push到 github网站上了

